// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
)

func mapper(meta MapMeta, homes []Home, shapes []Shape) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<head><link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" integrity=\"sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=\" crossorigin=\"\"><link rel=\"stylesheet\" href=\"reset.css\"><link rel=\"stylesheet\" href=\"app.css\"><script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\" integrity=\"sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=\" crossorigin=\"\"></script><script src=\"https://unpkg.com/htmx.org@1.9.0\" integrity=\"sha384-aOxz9UdWG0yBiyrTwPeMibmaoq07/d3a96GCbb9x60f3mOt5zwkjdbcHFnKH8qls\" crossorigin=\"anonymous\"></script></head><body><style>\n    #map {\n        height: 100%;\n        width: 100%;\n    }\n\n\n.custom-control {\n  box-sizing: border-box;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  line-height: 31px;\n  text-align: center;\n  text-decoration: none;\n  color: black;\n  border-radius: 2px;\n  width: 33px;\n  height: 33px;\n  border: 2px solid rgba(0, 0, 0, 0.2);\n}\n\n\n.modeset2 {\n  position: absolute;\n  top: 98px;\n  right: 10px;\n  z-index: 99999 !important;\n  font-size: 15px;\n  height: 30px;\n  width: 120px;\n}\n\n.infobox {\n    height: 200px;\n    width: 200px;\n}\n\n.tools { \n    position: absolute;\n  top: 98px;\n  right: 10px;\n    z-index: 99999 !important;\npadding: 10px;\n  height: 30px;\n  width: 120px;\n    \n}\n\n    </style><div id=\"map\" class=\"map\" data-center=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("[%f, %f]", meta.Lat, meta.Lng))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `map.templ`, Line: 80, Col: 88}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-zoom=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", meta.Zoom))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `map.templ`, Line: 80, Col: 131}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><div data-tile=\"EsriWorldImagery\" data-max-zoom=\"19\" data-min-zoom=\"5\" data-default></div><div data-tile=\"OpenStreetMap\"></div><table id=\"map-container\" data-hyperleaflet-source>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, h := range homes {
			templ_7745c5c3_Err = homeShape(h).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		for _, s := range shapes {
			switch s.ShapeType {
			case "area":
				templ_7745c5c3_Err = areaShape(s).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			default:
				templ_7745c5c3_Err = warning(fmt.Sprintf("shape ShapeType not valid (%s) on %+v", s.ShapeType, s)).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"info\" class=\"leaflet-bar leaflet-control infobox\"><span class=\" zoom-level\" id=\"zoom-level\"></span></div></table></div><script src=\"https://unpkg.com/hyperleaflet@0.4.4\"></script><script>\n    function startArea(lat, lng){\n        setMode('area')\n        console.log(`startArea ${lat} ${lng}`)\n    }\n\n    function debounce(func, wait) {\n        let timeout;\n        return function (...args) {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(this, args), wait);\n        };\n    }\n\n    // Function to update the URL query\n    function updateUrlQuery(details) {\n        console.log(`updateUrlQuery ${JSON.stringify(details)}`)\n        const queryString = new URLSearchParams(details).toString();\n        console.log(`updateUrlQuery >>>>>  ${queryString}`)\n\n        history.pushState(null, '', `?${queryString}`);\n    }\n\n    function addQueryParam(name, value) {\n\n        const queryString = new URLSearchParams(window.location.search);\n        queryString.set(name, value);\n\n        const url = queryString.toString();  // Fixed the typo\n        history.pushState(null, '', `?${url}`);\n    }\n\n    const debouncedUpdateUrlQuery = debounce(updateUrlQuery, 300);\n    \n    function highlightElement(element) {\n        // Apply the highlight styles\n        element.style.border = '5px solid yellow';\n        \n        // Start fading out the border after a delay (e.g., 2 seconds)\n        setTimeout(() => {\n            element.style.transition = 'border 2s ease-out';\n            element.style.border = '0 solid transparent';\n            \n            // Optionally, reset the transition after it's done for repeatability\n            setTimeout(() => {\n            element.style.transition = '';\n            }, 2000);  // Match the fade-out duration\n        }, 2000);  // Duration of the highlight before fading out\n    }\n\n     // Define the custom control\n    const CustomControl = L.Control.extend({\n        options: {\n            position: 'topright'\n        },\n\n        onAdd: function(map) {\n            // Create a div element with the 'custom-control' class\n            const controlDiv = L.DomUtil.create('div', 'custom-control');\n\n            // Add content to the control\n            controlDiv.innerHTML = `<div class=\"tools\" click=\"(e) => e.stopPropagation()\" >\n            <select id=\"mode\" class=\"modeset\" name=\"mode\" click=\"(e) => e.stopPropagation()\" >\n                        <option value=\"---\">---</option>\n                        <option value=\"point\">Create Points</option>\n                        <option value=\"area\">Create Areas</option>\n                    </select>\n            </div>\n            `;\n\n            const modeSetting = new URLSearchParams(window.location.search)\n            const select = controlDiv.firstChild\n            select.value = modeSetting.get('mode')\n\n            select.addEventListener('change', (elm) => {\n                addQueryParam('mode', elm.target.value)\n            })\n\n            \n\n            return controlDiv;\n        },\n\n        onRemove: function(map) {\n            // Nothing to clean up when the control is removed\n        }\n    });\n\n    var maps = [];\n\n    L.Map.addInitHook(function () {\n        if(maps.length == 0){\n            maps.push(this);\n        }\n        \n\n        this.on('popupopen', function(e) {\n            const popups = document.querySelectorAll(\".leaflet-popup-content-wrapper\")\n            popups.forEach((p) => {\n                htmx.process(p)\n            })\n        });\n\n      /*  this.on('moveend', function(e){\n                console.log('moveend')\n        })\n        this.on('move', function(e){\n                console.log('move')\n        })*/\n\n        this.on('moveend', function(e){\n            const mode = document.getElementById('mode')\n            console.log(e)\n            debouncedUpdateUrlQuery({\n                zoom: maps[0]._zoom,\n                lat: maps[0].options.center[0],\n                lng: maps[0].options.center[1],\n                mode: mode.value,\n            });\n        })\n\n        this.on('map:zoonend', function(e){\n            const mode = document.getElementById('mode')\n            debouncedUpdateUrlQuery({\n                zoom: maps[0]._zoom,\n                lat: maps[0].options.center[0],\n                lng: maps[0].options.center[1],\n                mode: mode.value\n            });\n        })\n\n        this.addControl(new CustomControl());\n\n    });\n\n\n    // Add the custom control to the map\n\n\n      const info = document.querySelector(\"#info\");\n\n      const setMode = function(mode){\n            console.log(`setMode ${mode}`)\n            mode.value = mode\n      }\n\n      window.addEventListener('map:click', (event) => {\n        const { point } = event.detail;\n        \n        if(event.target.name === \"mode\"){\n            console.log('non-map click')\n            console.log(event)\n            return    \n        }else {\n            console.log('map click')\n            console.log(event)\n        }\n\n        \n        const map = document.getElementById('map')\n        let mode = document.getElementById('mode')\n\n        switch(mode.value){\n            case 'point':{\n                const popup = `<div class=\"new-popup\" hx-target=\"this\">\n                    <form hx-post=\"/homes\">\n                        <input type=\"hidden\" name=\"lat\" value=\"${point.lat}\"></input>\n                        <input type=\"hidden\" name=\"lng\" value=\"${point.lng}\"></input>\n                        <button type=\"submit\">Create Point</button>\n                        <button onclick=\"location.reload();\">cancel</button>\n                    </form>\n                 </div>`\n\n                const marker = window.leaflet.marker([point.lat, point.lng]).addTo(maps[0])\n                    .bindPopup(popup)\n                    .openPopup();\n\n                const popups = document.querySelectorAll(\".new-popup\")\n                popups.forEach((p) => {\n                    htmx.process(p)\n                })\n                break;\n            }\n            case 'area':{\n\n                if(!window.existingNewAreaPoints){\n                    window.existingNewAreaPoints = [[point.lat, point.lng]]\n                    const polyGon = window.leaflet.polygon(window.existingNewAreaPoints, {color: 'red'}).addTo(maps[0]);        \n                    window.existingNewArea = polyGon  \n                }else {\n                    window.existingNewAreaPoints = [...window.existingNewAreaPoints, [point.lat, point.lng]]\n                    if(window.existingNewArea){\n                     //   window.existingNewArea.remove()           \n                    }\n                    \n                  /*  const popup = `<div class=\"new-popup\" hx-target=\"this\">\n                    <form hx-post=\"/shapes?updateMode=create-area\">\n                        <input type=\"hidden\" name=\"latlngs\" value=\"${JSON.stringify(window.existingNewAreaPoints)}\"></input>\n                        <button type=\"submit\">Save Area</button>\n                    </form>`*/\n\n                        const popup = `<div hx-get=\"/shapes?mode=area\" hx-trigger=\"revealed\">loading..</div>`\n                        \n                    window.leaflet.polygon(window.existingNewAreaPoints, {color: 'red'}).bindPopup(popup).openPopup().addTo(maps[0]);\n                }\n                break;\n            }\n            case '---': {\n                highlightElement(document.getElementById('mode'))\n            }\n            default: {\n                console.error(`mode  \"${mode.value}\" not found`)\n            }\n        }\n\n\n       \n            \n            \n        });\n    </script></body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
