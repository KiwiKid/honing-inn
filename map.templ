package main

import (
    "fmt"
)

templ mapper(meta MapMeta, homes []Home, shapes []Shape) {
    <head>
        <link
            rel="stylesheet"
            href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
            integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
            crossorigin=""
            />
            <link rel="stylesheet" href="reset.css" />
            <link rel="stylesheet" href="app.css" />
            <script
            src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
            integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
            crossorigin=""
            ></script>
            <script
            src="https://unpkg.com/htmx.org@1.9.0"
            integrity="sha384-aOxz9UdWG0yBiyrTwPeMibmaoq07/d3a96GCbb9x60f3mOt5zwkjdbcHFnKH8qls"
            crossorigin="anonymous"
            ></script>

    </head>
    <body >

    <style>
    #map {
        height: 100%;
        width: 100%;
    }


.custom-control {
  box-sizing: border-box;
  background-color: #fff;
  border: 1px solid #ccc;
  line-height: 31px;
  text-align: center;
  text-decoration: none;
  color: black;
  border-radius: 2px;
  width: 33px;
  height: 33px;
  border: 2px solid rgba(0, 0, 0, 0.2);
}


.modeset {
  position: absolute;
  top: 98px;
  right: 10px;
  z-index: 99999 !important;
  font-size: 15px;
  height: 30px;
  width: 120px;
}

.infobox {
    hight: 200px;
    width: 200px;
}

    </style>
     <div id="map" class="map" data-center={ fmt.Sprintf("[%f, %f]", meta.Lat, meta.Lng) } data-zoom={ fmt.Sprintf("%d", meta.Zoom)}>
        <div data-tile="EsriWorldImagery" data-max-zoom="19" data-min-zoom="5" data-default></div>
            <div data-tile="OpenStreetMap"></div>
            <table id="map-container" data-hyperleaflet-source >
                for _, h := range homes {
                    @homeShape(h)
                }
                for _, s := range shapes {
                    switch s.ShapeType {
                        case "area":
                           @areaShape(s)
                        default:
                            @warning(fmt.Sprintf("shape ShapeType not valid (%s) on %+v", s.ShapeType, s))
                        
                    }
                }
                <div id="info" class="leaflet-bar leaflet-control infobox" >
                    
                    <span class=" zoom-level" id="zoom-level"></span>

                </div>               
               
            </table>
            
        </div>

     <script src="https://unpkg.com/hyperleaflet@0.4.4"></script>
    <script>
    function startArea(lat, lng){
        setMode('area')
        console.log(`startArea ${lat} ${lng}`)
    }

    function debounce(func, wait) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }

    // Function to update the URL query
    function updateUrlQuery(details) {
        console.log(`updateUrlQuery ${JSON.stringify(details)}`)
        const queryString = new URLSearchParams(details).toString();
        console.log(`updateUrlQuery >>>>>  ${queryString}`)

        history.pushState(null, '', `?${queryString}`);
    }

    function addQueryParam(name, value) {

        const queryString = new URLSearchParams(window.location.search);
        queryString.set(name, value);

        const url = queryString.toString();  // Fixed the typo
        history.pushState(null, '', `?${url}`);
    }

    const debouncedUpdateUrlQuery = debounce(updateUrlQuery, 300);
    
    function highlightElement(element) {
        // Apply the highlight styles
        element.style.border = '5px solid yellow';
        
        // Start fading out the border after a delay (e.g., 2 seconds)
        setTimeout(() => {
            element.style.transition = 'border 2s ease-out';
            element.style.border = '0 solid transparent';
            
            // Optionally, reset the transition after it's done for repeatability
            setTimeout(() => {
            element.style.transition = '';
            }, 2000);  // Match the fade-out duration
        }, 2000);  // Duration of the highlight before fading out
    }

     // Define the custom control
    const CustomControl = L.Control.extend({
        options: {
            position: 'topright'
        },

        onAdd: function(map) {
            // Create a div element with the 'custom-control' class
            const controlDiv = L.DomUtil.create('div', 'custom-control');

            // Add content to the control
            controlDiv.innerHTML = `<select id="mode" class="modeset" name="mode" click="(e) => e.stopPropagation()" >
                        <option value="---">---</option>
                        <option value="point">Create Points</option>
                        <option value="area">Create Areas</option>
                    </select>
            
            `;

            // Add a click event listener
            controlDiv.addEventListener('click', () => {
               // alert('Button clicked!');
            });

            const modeSetting = new URLSearchParams(window.location.search)
            const select = controlDiv.firstChild
            select.value = modeSetting.get('mode')

            select.addEventListener('change', (elm) => {
                addQueryParam('mode', elm.target.value)
            })

            

            return controlDiv;
        },

        onRemove: function(map) {
            // Nothing to clean up when the control is removed
        }
    });

    var maps = [];

    L.Map.addInitHook(function () {
        if(maps.length == 0){
            maps.push(this);
        }
        

        this.on('popupopen', function(e) {
            const popups = document.querySelectorAll(".leaflet-popup-content-wrapper")
            popups.forEach((p) => {
                htmx.process(p)
            })
        });

        this.on('moveend', function(e){
                console.log('moveend')
        })
        this.on('move', function(e){
                console.log('move')
        })

        this.on('moveend', function(e){
            const mode = document.getElementById('mode')
            console.log(e)
            debouncedUpdateUrlQuery({
                zoom: maps[0]._zoom,
                lat: maps[0].options.center[0],
                lng: maps[0].options.center[1],
                mode: mode.value,
            });
        })

        this.on('map:zoonend', function(e){
            const mode = document.getElementById('mode')
            debouncedUpdateUrlQuery({
                zoom: maps[0]._zoom,
                lat: maps[0].options.center[0],
                lng: maps[0].options.center[1],
                mode: mode.value
            });
        })

        this.addControl(new CustomControl());

    });


    // Add the custom control to the map


      const info = document.querySelector("#info");

      const setMode = function(mode){
            console.log(`setMode ${mode}`)
            mode.value = mode
      }

      window.addEventListener('map:click', (event) => {
        const { point } = event.detail;
        
        if(event.explicitOriginalTarget.id !== "map" || event.explicitOriginalTarget.id === "mode"){
            console.log('non-map click')
            console.log(event.explicitOriginalTarget)
            return    
        }else {
            console.log('map click')
            console.log(event.explicitOriginalTarget)
        }

        
        const map = document.getElementById('map')
        let mode = document.getElementById('mode')

        switch(mode.value){
            case 'point':{
                const popup = `<div class="new-popup" hx-target="this">
                    <form hx-post="/homes">
                        <input type="hidden" name="lat" value="${point.lat}"></input>
                        <input type="hidden" name="lng" value="${point.lng}"></input>
                        <button type="submit">Create Point</button>
                        <button onclick="location.reload();">cancel</button>
                    </form>
                 </div>`

                const marker = window.leaflet.marker([point.lat, point.lng]).addTo(maps[0])
                    .bindPopup(popup)
                    .openPopup();

                const popups = document.querySelectorAll(".new-popup")
                popups.forEach((p) => {
                    htmx.process(p)
                })
                break;
            }
            case 'area':{

                if(!window.existingNewAreaPoints){
                    window.existingNewAreaPoints = [[point.lat, point.lng]]
                    const polyGon = window.leaflet.polygon(window.existingNewAreaPoints, {color: 'red'}).addTo(maps[0]);        
                    window.existingNewArea = polyGon  
                }else {
                    window.existingNewAreaPoints = [...window.existingNewAreaPoints, [point.lat, point.lng]]
                    if(window.existingNewArea){
                     //   window.existingNewArea.remove()           
                    }
                    
                  /*  const popup = `<div class="new-popup" hx-target="this">
                    <form hx-post="/shapes?updateMode=create-area">
                        <input type="hidden" name="latlngs" value="${JSON.stringify(window.existingNewAreaPoints)}"></input>
                        <button type="submit">Save Area</button>
                    </form>`*/

                        const popup = `<div hx-get="/shapes?mode=area" hx-trigger="revealed">loading..</div>`
                        
                    window.leaflet.polygon(window.existingNewAreaPoints, {color: 'red'}).bindPopup(popup).openPopup().addTo(maps[0]);
                }
                break;
            }
            case '---': {
                highlightElement(document.getElementById('mode'))
            }
            default: {
                console.error(`mode  "${mode.value}" not found`)
            }
        }


       
            
            
        });
    </script>
   
    </body>
}