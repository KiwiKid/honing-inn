package main 

import (
    "fmt"
)

templ loadChat(themeId uint, homeId uint, chatTypeId uint){
    <div hx-get={ fmt.Sprintf("/chatlist?themeId=%d&homeId=%d&chatTypeId=%d", themeId, homeId, chatTypeId)} hx-trigger="revealed" hx-swap="outerHTML">[loadChat]</div>
}

templ chatTypeNav(chatTypes []ChatType, chatMeta ChatMeta){
    <div>[chatTypeNav]
    if chatMeta.HomeID == 0 {
        <div>Select a Home to get started</div>
    } else {
        for _, ct := range chatTypes {
            <button hx-get={ fmt.Sprintf("/chatlist?themeId=%d&homeId=%d&chatTypeId=%d", chatMeta.ThemeID, chatMeta.HomeID, ct.ID)}>{ct.Name}</button>
        }
                <a href="/mapmanager" target="_">manage</a>
    }
    </div>
}

templ emptyChat(chats []Chat, chatTypes []ChatType, chatMeta ChatMeta, swapOOB bool){
    
    <div id="chat-box" 
        if swapOOB { 
            hx-swap-oob="true"
        }
        class="">[emptyChat { fmt.Sprintf("chats: %d", len(chats))}]
        <div>
            @chatTypeNav(chatTypes, chatMeta)
            { fmt.Sprintf("%+v", chatMeta)}
        </div>
        if chatMeta.ChatTypeID > 0 {
             [[emptyChat.ChatTypeID]]
            @createChatForm(chatMeta, chatMeta.ChatTypeID)
            
        }
        if len(chats) > 0 {
            @chatRatingListView(chats)
            

        }
        @createAllChatsForm(chatMeta, chatTypes)
        
    </div>
}


templ createChatList(){
    <div>[createChatList]</div>
}

templ chatList(chats []Chat, chatMeta ChatMeta, chatTypeID uint){
    <div hx-swap-oob="true" id="chat-box" style="background-color: #f3f4f6; " >[chatList]
            <button hx-get={ fmt.Sprintf("/homes/%d?viewMode=view", chatMeta.HomeID) }>&lt;&lt;</button>

    chatList for { fmt.Sprintf("%d len:%d", chatMeta.HomeID, len(chats)) } 
        [[chatList]]
        if chatMeta.ChatTypeID > 0 {
            [[chatList.ChatTypeID]]
            @createChatForm(chatMeta, chatTypeID)
        }
        


        for _, c := range chats {
            @chat(c)
        }


    </div>
}

templ chat(chat Chat){
    <div data-theme-id={fmt.Sprintf("%d", chat.ThemeID)} data-home-id={ fmt.Sprintf("%d", chat.HomeID)} class="max-w-2xl mx-auto p-4 space-y-4">[[chat]]
        <details><summary>prompt</summary>ChatTypeTitle: {chat.ChatTypeTitle} - Rating: { fmt.Sprintf("%d", chat.Rating)} { chat.Prompt }</details>
        <button hx-delete={ fmt.Sprintf("/chat/%d", chat.ID)} >delete</button>
        <div>Rating: { fmt.Sprintf("%d", chat.Rating)}</div>
        for _, res := range chat.Results {
            if res.Role == "assistant" {
                <div class="bg-gray-100 text-gray-800 p-3 rounded-lg w-fit max-w-xs">
                    <p><pre width="100%">{res.Result}</pre></p>
                </div>
            } else {
                <div class="bg-blue-500 text-white p-3 rounded-lg w-fit max-w-xs ml-auto text-right">
                    <p><pre>{res.Result}</pre></p>
                </div>
            }
        }
    </div>
}

templ chatRatingListView(chats []Chat){
    [chatRatingListView]
    for _, c := range chats {
        <article class="border-b">
            <details class="group">
                <summary class="w-full text-left p-4 bg-gray-100 hover:bg-gray-200 flex justify-between items-center cursor-pointer">
                    <span>{ c.ChatTypeTitle }</span>
                     if c.Rating > 0 {
                        <div style="font-size: 14px; font-weight: 600; color: #2d3748;">{ c.ChatTypeTitle }</div>
                        
                        <!-- Rating (stars) on the next row -->
                        <div style="display: flex; gap: 4px; margin-top: 4px;">
                            for i := 0; i < c.Rating; i++ {
                                @star()
                            }
                        </div>
                    }
                </summary>
                <section class="p-4 bg-gray-50">
                    for _, ch := range c.Results {
                        <p><pre>{ch.Result}</pre></p>
                    }
                </section>
            </details>
        </article>
    }
}



templ createChatForm(chatMeta ChatMeta, chatTypeID uint){
    <div>[createChatForm]
        <form hx-post="/chat">
            <input type="hidden" name="HomeID" value={ fmt.Sprintf("%d", chatMeta.HomeID) }/>
            <input type="hidden" name="chatTypeID" value={ fmt.Sprintf("%d", chatTypeID) }/>
            <input type="hidden" name="ThemeID" value={ fmt.Sprintf("%d", chatMeta.ThemeID) }/>
            <button type="submit">Research</button>
        </form>
    </div>
}


templ createAllChatsForm(chatMeta ChatMeta, chatTypes []ChatType){
    <div>[createAllChatForm]
        <form hx-post="/chat">
            <input type="hidden" name="HomeID" value={ fmt.Sprintf("%d", chatMeta.HomeID) }/>
            <input type="hidden" name="All" value="true" />
            <input type="hidden" name="ThemeID" value={ fmt.Sprintf("%d", chatMeta.ThemeID) }/>
            <button type="submit">Research ALL</button>
        </form>
    </div>
}